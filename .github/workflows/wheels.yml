name: Release

on:
  push:
    branches:
      - "master"
    pull_request:
      branches:
        - "master"

env:
  cython: "0.29.28"
  cibuildwheel: "2.11.3"
  TWINE_NONINTERACTIVE: "1"

jobs:

  wheel:
    runs-on: ${{ matrix.os }}

    env:
#      MACOSX_DEPLOYMENT_TARGET: "10.9"
#      CIBW_BUILD_VERBOSITY: "1"
      # CIBW_BEFORE_ALL_MACOS: "bash tools/install_libzmq.sh"
      # CIBW_BEFORE_ALL_LINUX: "bash tools/install_libzmq.sh"

      CIBW_ENVIRONMENT_MACOS: ""
#      CIBW_ENVIRONMENT_LINUX: >-
#        CFLAGS=-Wl,-strip-all
#        CXXFLAGS=-Wl,-strip-all


#      CIBW_TEST_REQUIRES: "pytest"
#      CIBW_TEST_COMMAND: "pytest -vsx {package}/tools/test_wheel.py"
      CIBW_BUILD: "${{ matrix.cibw.build || '*' }}"
      CIBW_SKIP: "${{ matrix.cibw.skip || '' }}"
#      CIBW_MANYLINUX_X86_64_IMAGE: "${{ matrix.cibw.manylinux_image }}"
#      CIBW_MANYLINUX_I686_IMAGE: "${{ matrix.cibw.manylinux_image }}"
#      CIBW_MANYLINUX_AARCH64_IMAGE: "${{ matrix.cibw.manylinux_image }}"
#       CIBW_ARCHS_LINUX: "${{ matrix.cibw.arch || 'auto' }}"
#       CIBW_ARCHS_MACOS: "${{ matrix.cibw.arch || 'auto' }}"
      CIBW_REPAIR_WHEEL_COMMAND: "${{ matrix.cibw.repair_build_command }}"

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-10.15
            name: mac
            cibw:
              build: "cp39-*x86_64 cp310-*x86_64"

#          - os: macos-10.15
#            name: mac-arm
#            cibw:
#              arch: universal2
#              build: "cp39* cp310*"

          - os: ubuntu-20.04
            name: manylinux2010
            cibw:
              build: "cp39-*x86_64 cp310-*x86_64"
              skip: "*musllinux*"
              manylinux_image: manylinux2010
              # repair_build_command: 'pip install pyarrow && python -c "import pyarrow; pyarrow.create_library_symlinks()" && export LD_LIBRARY_PATH=/opt/_internal/cpython-3.9.9/lib/python3.9/site-packages/pyarrow/:$LD_LIBRARY_PATH && auditwheel repair -w {dest_dir} {wheel}'
              repair_build_command: ''

          - os: windows-latest
            name: windows
            cibw:
              build: "cp39-* cp310-*"


#          - os: ubuntu-20.04
#            name: cp39-manylinux_aarch64
#            cibw:
#              build: "cp39*"
#              skip: "*musllinux*"
#              manylinux_image: manylinux2014
#              arch: aarch64
#              repair_build_command: ''
##
#          - os: ubuntu-20.04
#            name: cp310-manylinux_aarch64
#            cibw:
#              build: "cp310*"
#              skip: "*musllinux*"
#              manylinux_image: manylinux2014
#              arch: aarch64

    steps:
      - uses: actions/checkout@v2

      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11"
          architecture: ${{ matrix.architecture }}


      - name: install dependencies
        run: |
          pip install --upgrade setuptools pip wheel
          pip install cibuildwheel=="${{ env.cibuildwheel }}"

      - name: show environment
        if: matrix.os != 'windows-latest'
        run: |
          pip freeze
          export

      - name: list target wheels
        run: |
          python -m cibuildwheel . --print-build-identifiers

      - name: build wheels
        run: |
          python -m cibuildwheel .

      - uses: actions/upload-artifact@v2
        with:
          name: wheels-${{ matrix.name }}
          path: "wheelhouse/*"
          if-no-files-found: error

#      - name: Publish wheels to PyPI
#        if: startsWith(github.ref, 'refs/tags/')
#        env:
#          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
#          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#        run: |
#          pip install twine
#          twine upload --skip-existing wheelhouse/*
